Failure: Cannot evaluate Script file: import datetime import hashlib import hmac import requests from urllib.parse import urlparse # Replace these with your credentials access_key = '' secret_key = '' #session_token = '' # Only needed if using temporary credentials region = 'us-east-1' service = 's3' host = 's3.amazonaws.com' endpoint = f'https://{host}/' # Create a date for headers and the credential string t = datetime.datetime.utcnow() amz_date = t.strftime('%Y%m%dT%H%M%SZ') date_stamp = t.strftime('%Y%m%d') # Date w/o time, used in credential scope # ************* TASK 1: CREATE A CANONICAL REQUEST ************* method = 'GET' canonical_uri = '/' canonical_querystring = '' canonical_headers = f'host:{host}\n' + f'x-amz-date:{amz_date}\n' signed_headers = 'host;x-amz-date' payload_hash = hashlib.sha256(('').encode('utf-8')).hexdigest() canonical_request = '\n'.join([ method, canonical_uri, canonical_querystring, canonical_headers, signed_headers, payload_hash ]) # ************* TASK 2: CREATE THE STRING TO SIGN ************* algorithm = 'AWS4-HMAC-SHA256' credential_scope = f'{date_stamp}/{region}/{service}/aws4_request' string_to_sign = '\n'.join([ algorithm, amz_date, credential_scope, hashlib.sha256(canonical_request.encode('utf-8')).hexdigest() ]) # ************* TASK 3: CALCULATE THE SIGNATURE ************* def sign(key, msg): return hmac.new(key, msg.encode('utf-8'), hashlib.sha256).digest() def get_signature_key(key, date_stamp, region_name, service_name): k_date = sign(('AWS4' + key).encode('utf-8'), date_stamp) k_region = sign(k_date, region_name) k_service = sign(k_region, service_name) k_signing = sign(k_service, 'aws4_request') return k_signing signing_key = get_signature_key(secret_key, date_stamp, region, service) signature = hmac.new(signing_key, string_to_sign.encode('utf-8'), hashlib.sha256).hexdigest() # ************* TASK 4: ADD SIGNING INFORMATION TO THE REQUEST ************* authorization_header = ( f'{algorithm} Credential={access_key}/{credential_scope}, ' f'SignedHeaders={signed_headers}, Signature={signature}' ) # Build headers headers = { 'x-amz-date': amz_date, 'Authorization': authorization_header } # Add session token if using STS # if session_token: # headers['x-amz-security-token'] = session_token # Print headers for use in SnapLogic print("Paste the following headers into SnapLogic HTTP Client Snap:") for k, v in headers.items(): print(f"{k}: {v}") # (Optional) Execute the request to test # response = requests.get(endpoint, headers=headers) # print(response.status_code, response.text) , Reason: SyntaxError: no viable alternative at input ''https://{host}/'' in <script> at line number 15 at column number 12, Resolution: Please fix the script file error at line: 15 column: 12
