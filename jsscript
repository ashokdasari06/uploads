const crypto = require('crypto');
const https = require('https');

// ==== Replace with your AWS credentials ====
const accessKeyId = 'YOUR_ACCESS_KEY_ID';
const secretAccessKey = 'YOUR_SECRET_ACCESS_KEY';
const sessionToken = 'YOUR_SESSION_TOKEN'; // optional, for STS
// ==========================================

const service = 's3';
const region = 'us-east-1';
const method = 'GET';
const host = 's3.amazonaws.com';
const endpoint = `https://${host}/`;

const now = new Date();
const amzDate = now.toISOString().replace(/[:-]|\.\d{3}/g, '') + 'Z'; // yyyyMMdd'T'HHmmss'Z'
const dateStamp = amzDate.slice(0, 8); // yyyyMMdd

const canonicalUri = '/';
const canonicalQuerystring = '';
const canonicalHeaders = `host:${host}\n` + `x-amz-date:${amzDate}\n`;
const signedHeaders = 'host;x-amz-date';
const payloadHash = crypto.createHash('sha256').update('').digest('hex');

const canonicalRequest = [
  method,
  canonicalUri,
  canonicalQuerystring,
  canonicalHeaders,
  signedHeaders,
  payloadHash
].join('\n');

const algorithm = 'AWS4-HMAC-SHA256';
const credentialScope = `${dateStamp}/${region}/${service}/aws4_request`;
const stringToSign = [
  algorithm,
  amzDate,
  credentialScope,
  crypto.createHash('sha256').update(canonicalRequest).digest('hex')
].join('\n');

function hmac(key, data) {
  return crypto.createHmac('sha256', key).update(data).digest();
}

function getSignatureKey(key, dateStamp, regionName, serviceName) {
  const kDate = hmac(Buffer.from('AWS4' + key, 'utf8'), dateStamp);
  const kRegion = hmac(kDate, regionName);
  const kService = hmac(kRegion, serviceName);
  return hmac(kService, 'aws4_request');
}

const signingKey = getSignatureKey(secretAccessKey, dateStamp, region, service);
const signature = crypto.createHmac('sha256', signingKey).update(stringToSign).digest('hex');

const authorizationHeader = `${algorithm} Credential=${accessKeyId}/${credentialScope}, SignedHeaders=${signedHeaders}, Signature=${signature}`;

// === Build request headers ===
const headers = {
  'x-amz-date': amzDate,
  'Authorization': authorizationHeader
};

if (sessionToken) {
  headers['x-amz-security-token'] = sessionToken;
}

console.log("🔐 Use these headers in SnapLogic HTTP Client Snap:");
for (const [key, value] of Object.entries(headers)) {
  console.log(`${key}: ${value}`);
}

// === Optional: make the request directly ===
const options = {
  hostname: host,
  path: '/',
  method: 'GET',
  headers: headers
};

const req = https.request(options, res => {
  console.log(`Status: ${res.statusCode}`);
  res.on('data', d => process.stdout.write(d));
});
req.on('error', error => console.error(error));
req.end();
