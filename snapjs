// Replace these with your AWS credentials
var accessKey = 'YOUR_ACCESS_KEY';
var secretKey = 'YOUR_SECRET_KEY';
// var sessionToken = 'YOUR_SESSION_TOKEN'; // Uncomment if using temporary credentials

var region = 'us-east-1';
var service = 's3';
var host = 's3.amazonaws.com';

// Get date/time in required formats
var now = new Date();
var amzDate = now.toISOString().replace(/[:-]|\.\d{3}/g, '') + 'Z'; // YYYYMMDD'T'HHMMSS'Z'
var dateStamp = amzDate.substring(0, 8); // YYYYMMDD

// Task 1: Create Canonical Request
var method = 'GET';
var canonicalUri = '/';
var canonicalQuerystring = '';
var canonicalHeaders = 'host:' + host + '\n' + 'x-amz-date:' + amzDate + '\n';
var signedHeaders = 'host;x-amz-date';

// Use CryptoJS for hashing and HMAC (SnapLogic includes CryptoJS)
var payloadHash = CryptoJS.SHA256('').toString();

var canonicalRequest = method + '\n' +
                       canonicalUri + '\n' +
                       canonicalQuerystring + '\n' +
                       canonicalHeaders + '\n' +
                       signedHeaders + '\n' +
                       payloadHash;

// Task 2: Create String to Sign
var algorithm = 'AWS4-HMAC-SHA256';
var credentialScope = dateStamp + '/' + region + '/' + service + '/aws4_request';
var stringToSign = algorithm + '\n' +
                   amzDate + '\n' +
                   credentialScope + '\n' +
                   CryptoJS.SHA256(canonicalRequest).toString();

// Task 3: Calculate the Signature
function hmac(key, msg) {
    return CryptoJS.HmacSHA256(msg, key);
}

function getSignatureKey(key, dateStamp, regionName, serviceName) {
    var kDate = hmac('AWS4' + key, dateStamp);
    var kRegion = hmac(kDate, regionName);
    var kService = hmac(kRegion, serviceName);
    var kSigning = hmac(kService, 'aws4_request');
    return kSigning;
}

var signingKey = getSignatureKey(secretKey, dateStamp, region, service);
var signature = CryptoJS.HmacSHA256(stringToSign, signingKey).toString();

// Task 4: Build Authorization Header
var authorizationHeader = algorithm + ' ' +
                          'Credential=' + accessKey + '/' + credentialScope + ', ' +
                          'SignedHeaders=' + signedHeaders + ', ' +
                          'Signature=' + signature;

// Prepare headers to use in HTTP Client Snap
var headers = {
    'x-amz-date': amzDate,
    'Authorization': authorizationHeader,
    'Host': host
};

// Uncomment if you use session token
// if (sessionToken) {
//    headers['x-amz-security-token'] = sessionToken;
// }

// Output headers to pipeline for use downstream (e.g. HTTP Client Snap)
output = headers;
